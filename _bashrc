# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# enable 256 colors in terminal (useful for vim colorschemes)
if [ -e /usr/share/terminfo/x/xterm-256color ]; then
	export TERM='xterm-256color'
else
	export TERM='xterm-color'
fi

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# Set HISTSIZE and HISTFILESIZE to an empty value as we append and love our history :)
# unset isn't working. It will be reset to 500 everytime!
export HISTSIZE=
export HISTFILESIZE=

# Save history immediatly after running command
# With "history -n" it's possible to read all new lines since last read
PROMPT_COMMAND="history -a"

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

parse_git_branch() {
    branch=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/')
    if [ "$branch" ]; then
        if [ "$branch" = '((no branch))' ]; then
            tag=$(git describe 2> /dev/null)
            if [ $? -eq 0 ]; then
                echo "(no branch, $tag)"
            fi
        else
            echo $branch
        fi
    fi
}

if [ "$color_prompt" = yes ]; then
	PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]$(parse_git_branch)\$ '
else
	PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w$(parse_git_branch)\$ '
fi

unset color_prompt force_color_prompt

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# Set 'vim' as default editor if it can be found, else use 'vi'
seteditor() {
	if [ -x "`which vim`" ]; then
		EDITOR="vim"
		alias vi=$EDITOR
	else
		# No vim found, use vi instead
		EDITOR=vi
	fi
	export EDITOR
}

viw() {
	$EDITOR $(which $1)
}

# Set to UTF-8 and english locale
export LANG="en_US.UTF-8"

# Set to 'C' to make ls sort dotfiles
export LC_COLLATE=C

# Set the right editor
seteditor

# Set CONCURRENCY_LEVEL to number of CPUs
export CONCURRENCY_LEVEL=`grep -c processor /proc/cpuinfo`

# Source additional information, which applies to the current host only
if [ -f ~/.bash_local ]; then
	. ~/.bash_local
fi

# Export some debian stuff
DEBEMAIL=$DEBEMAIL_local
DEBFULLNAME=$DEBFULLNAME_local
export DEBEMAIL DEBFULLNAME

# In case, we've changed the directory, switch back to home dir
cd

#if [ "$SHLVL" -lt 2 ]; then
#	echo "Hit Ctrl+C to not raise screen now!"
#	sleep 1
#	screen -D -r
#else
if [ "$SHLVL" -gt 4 ]; then
	function ssh() {
		hname=${1##*@}
		echo -n -e "\033k$hname\033\\"
		$(which ssh) $@
		echo -n -e "\033k`hostname`\033\\"
	}
	function telnet() {
		echo -n -e "\033k$1\033\\"
		$(which telnet) $@
		echo -n -e "\033k`hostname`\033\\"
	}
	echo -n -e "\033k`hostname`\033\\"
fi
